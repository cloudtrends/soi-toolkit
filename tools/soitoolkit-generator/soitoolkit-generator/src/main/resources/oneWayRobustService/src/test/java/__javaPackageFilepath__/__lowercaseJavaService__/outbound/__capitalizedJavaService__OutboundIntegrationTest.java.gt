package ${javaPackage}.${lowercaseJavaService}.outbound;

import static org.junit.Assert.*;

import java.io.FileNotFoundException;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;

import javax.sql.DataSource;

import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.routing.CouldNotRouteOutboundMessageException;
import org.mule.api.transformer.TransformerException;
import org.mule.api.transformer.TransformerMessagingException;
import org.mule.transport.email.MailProperties;
import org.mule.transport.file.FileConnector;
import org.mule.transport.ftp.FtpConnector;
import org.mule.transport.sftp.SftpConnector;
import org.mule.util.UUID;

import org.soitoolkit.commons.mule.jdbc.JdbcScriptEngine;
import org.soitoolkit.commons.mule.test.AbstractJmsTestUtil;
<% if (inboundTransport=="SERVLET") { %>
import org.soitoolkit.commons.mule.test.AbstractTestCaseWithServletEngine;
<% } else { %> 
import org.soitoolkit.commons.mule.test.junit4.AbstractTestCase;
<% } %> 
import org.soitoolkit.commons.mule.util.RecursiveResourceBundle;
import org.soitoolkit.commons.mule.test.ActiveMqJmsTestUtil;
import org.soitoolkit.commons.mule.test.Dispatcher;
import org.soitoolkit.commons.mule.util.MiscUtil;
import org.soitoolkit.commons.mule.util.MuleUtil;
import org.soitoolkit.commons.mule.core.PropertyNames;
import org.soitoolkit.commons.mule.ftp.FtpUtil;
import org.soitoolkit.commons.mule.sftp.SftpUtil;
import org.soitoolkit.commons.mule.file.FileUtil;
import org.soitoolkit.commons.mule.mail.MailUtil;
import org.soitoolkit.commons.mule.jdbc.JdbcUtil;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ${capitalizedJavaService}OutboundIntegrationTest extends AbstractTestCase {
	
	private static final Logger log = LoggerFactory.getLogger(${capitalizedJavaService}OutboundIntegrationTest.class);
	private static final RecursiveResourceBundle rb = new RecursiveResourceBundle("${configPropertyFile}");

<% if (outboundTransport=="VM") { %>
	private static final String OUT_VM_QUEUE = rb.getString("${uppercaseService}_OUT_VM_QUEUE");
<% } %> 

<% if (outboundTransport=="FILE" || outboundTransport=="FTP") { %>
	private static final String OUT_FOLDER = rb.getString("${uppercaseService}_OUTBOUND_FOLDER");
<% } %> 
	private static final String IN_QUEUE         = rb.getString("${uppercaseService}_OUT_QUEUE");
	private static final String DEADLETTER_QUEUE = rb.getString("${uppercaseService}_DL_QUEUE");

	private static final String ERROR_LOG_QUEUE = "${jmsLogErrorQueue}";
	private AbstractJmsTestUtil jmsUtil = null;

<% if (outboundTransport=="JDBC") { %>
    private static final String OUT_TABLE        = "${uppercaseService}_IMPORT_TB";
<% } %> 
<% if (outboundTransport=="JDBC") { %>
    DataSource dataSource = null;
    SimpleJdbcTemplate jdbcTemplate = null;
<% } %> 
	
    /**
     *
     * DLQ tests expects the following setup in activemq.xml (in the <policyEntry> - element):
     *                   <deadLetterStrategy>
     *                     <!--
     *                      Use the prefix 'DLQ.' for the destination name, and make
     *                      the DLQ a queue rather than a topic
     *                     -->
     *                     <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
     *                   </deadLetterStrategy>
     * 
     */
    public ${capitalizedJavaService}OutboundIntegrationTest() {
      
        // Only start up Mule once to make the tests run faster...
        // Set to false if tests interfere with each other when Mule is started only once.
        setDisposeContextPerClass(true);
    }

	protected String getConfigResources() {
        return "soitoolkit-mule-jms-connector-activemq-embedded.xml," + 
<% if (serviceXaTransactional) { %>
        "soitoolkit-mule-jms-xa-connector-activemq-embedded.xml," + 
<% } else { %>  
<% } %>  
<% if (outboundTransport=="JDBC") { %>
  <% if (serviceXaTransactional) { %>
        "soitoolkit-mule-jdbc-xa-datasource-hsql-embedded.xml," +
        "${artifactId}-jdbc-xa-connector.xml," +
  <% } %>  
        "soitoolkit-mule-jdbc-datasource-hsql-embedded.xml," +
		"${artifactId}-jdbc-connector.xml," +
<% } %>  
<% if (outboundTransport=="FTP") { %>
		"soitoolkit-mule-ftp-connector-embedded.xml," + 
<% } %>
<% if (outboundTransport=="SFTP") { %>
		"soitoolkit-mule-sftp-connector-embedded.xml," +
<% } %>
		"${artifactId}-common.xml," +
		"${service}-outbound-service.xml," +
		"teststub-services/${service}-outbound-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		doSetUpJms();
<% if (outboundTransport=="JDBC") { %>
		doSetUpDb();
<% } %> 

<% if (outboundTransport=="FILE") { %>
		FileUtil.initFolder(new File(OUT_FOLDER));
<% } %> 
<% if (outboundTransport=="FTP") { %>
		// Clear ftp-directories used for outbound endpoint
		// TODO: Also reset the archive
        FtpUtil.initEndpointDirectory(muleContext, "${service}-outbound-endpoint");		
<% } %> 
		
<% if (outboundTransport=="SFTP") { %>
		// Clear sftp-directories used for outbound endpoint
		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-resend-from-archive-service", "${service}-teststub-service"},
			new String[] {"${service}-outbound-endpoint"});		
<% } %> 
    }

	private void doSetUpJms() {
		// TODO: Fix lazy init of JMS connection et al so that we can create jmsutil in the declaration
		// (The embedded ActiveMQ queue manager is not yet started by Mule when jmsutil is delcared...)
		if (jmsUtil == null) jmsUtil = new ActiveMqJmsTestUtil();
		
		// Clear queues used for the inbound endpoint
		jmsUtil.clearQueues(IN_QUEUE, DEADLETTER_QUEUE);
		
<% if (outboundTransport=="JMS") { %>
		// Clear queues used for the outbound endpoint
		jmsUtil.clearQueues(OUT_QUEUE);
<% } %> 

		// Clear queues used for error handling
		jmsUtil.clearQueues(ERROR_LOG_QUEUE);
    }
		
<% if (outboundTransport=="JDBC") { %>
	private void doSetUpDb() throws FileNotFoundException {
		dataSource = JdbcUtil.lookupDataSource(muleContext, "soitoolkit-jdbc-datasource");
		jdbcTemplate = new SimpleJdbcTemplate(dataSource);
		JdbcScriptEngine se = new JdbcScriptEngine(dataSource);
		
		try {
			se.execute("src/environment/setup/${artifactId}-db-drop-tables.sql");
		} catch (Throwable ex) {
			log.warn("Drop db script failed, maybe no db exists? " + ex.getMessage());
		}
		se.execute("src/environment/setup/${artifactId}-db-create-tables.sql");
		se.execute("src/environment/setup/${artifactId}-db-insert-testdata.sql");
    }
<% } %> 

    @Test
    public void test${capitalizedJavaService}_outbound_ok() throws Exception {

		Map<String, String> props = new HashMap<String, String>();
        String receivingService   = "${service}-outbound-teststub-service";
<% if (inboundTransport=="POP3" || inboundTransport=="IMAP" || outboundTransport=="SMTP") { %>
		final  int timeout        = 30000; // Let's increase the timeout a bit since we have an email transport involved
<% } else { %>
		final  int timeout        = 5000;
<% } %> 

		// Verify that the message is transfered binary, without changes
		String inputStr = "Test with Swedish umlaut chars too see that we dont have accidental byte/char conversion."
				+ " Small letters: aa=\\u00e5 ae=\\u00e4 oe=\\u00f6."
				+ " Capital letters: AA=\\u00c5 AE=\\u00c4 OE=\\u00d6."
				+ " Also add different line endings. LF: \\n. CR + LF: \\r\\n.";
		byte[] input          = inputStr.getBytes("UTF-8");
		byte[] expectedResult = input;

<% if (inboundEndpointFilebased) { %>
		// add originalFilename - originalFilename is expected to be set for this flow
		String filename = "fname_" + UUID.getUUID() + ".bin";
		props.put(FileConnector.PROPERTY_ORIGINAL_FILENAME, filename);
<% } %>

    // add correlation id inbound property - correlation id is expected to be set for this flow
		String corrId = UUID.getUUID();
		props.put(PropertyNames.SOITOOLKIT_CORRELATION_ID, corrId);

		// Setup inbound endpoint for jms
		String inboundEndpoint = "jms://" + IN_QUEUE + "?connector=soitoolkit-jms-connector";

		// Invoke the service and wait for the transformed message to arrive at the receiving teststub service
		MuleMessage reply = dispatchAndWaitForServiceComponent(inboundEndpoint, input, props, receivingService, timeout);

    byte[] transformedMessage = (byte[]) reply.getPayload();    
		assertArrayEquals("message should be transfered binary and unchanged", expectedResult, transformedMessage);
<% if (inboundEndpointFilebased && outboundEndpointFilebased) { %>
    <% if (muleVersion.getPomSuffix().startsWith("3.3")) { %>
    // NOTE: pre Mule 3.4 uses outbound scope, change to inbound scope below for Mule 3.4 or higher
    assertEquals("filename should be set", filename, reply.getOutboundProperty(FileConnector.PROPERTY_ORIGINAL_FILENAME));
    <% } else { %>
    assertEquals("filename should be set", filename, reply.getInboundProperty(FileConnector.PROPERTY_ORIGINAL_FILENAME));
    <% } %>
<% } %>
		// Verify inbound jms-queues
        assertEquals(0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());
        assertEquals(0, jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE).size());

<% if (outboundTransport=="JMS") { %>
		// Verify outbound jms-queues, i.e. that the teststub-producer has consumed it
        assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());
<% } else if (outboundTransport=="JDBC") { %>
        // Verify that the record is consumed by the teststub-producer from the out-table (import table)
        int cntOut = jdbcTemplate.queryForInt("SELECT COUNT(*) FROM " + OUT_TABLE);
        assertEquals("Record still left in out-table", 0, cntOut);
<% } %> 

		// Verify error-queue
        assertEquals(0, jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE).size());
    }

<% if (serviceTransactional) { %>
    /**
     * Verifies error handling with regards to:
     * - transaction-handling 
     * - DLQ-handling
     * - retry-policy 
     * - logging error information to error-queue
     * 
     * Relies on a redelivery policy defined for ActiveMQ like:
     * (e.g. defined in the amq-embedded-connector used when running jUnit tests)
     * 
     * <spring:bean class="org.apache.activemq.RedeliveryPolicy">
     *	 <spring:property name="maximumRedeliveries" value="3" />
     *	 <spring:property name="initialRedeliveryDelay" value="500" />
     * </spring:bean>
     * 
     * 
     * DLQ tests expects the following setup in activemq.xml (in the <policyEntry> - element):
     * 
     * <deadLetterStrategy>
     * <!--
     *      Use the prefix 'DLQ.' for the destination name, and make
     *      the DLQ a queue rather than a topic
     *      -->
     *      <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
     * </deadLetterStrategy>
     *
     * @throws JMSException
     */
    @Test
    public void test${capitalizedJavaService}_outbound_transformationError() throws JMSException {

        String id    = "Cnnn";
        String value = "Some value";
        String expectedErrMsg  = "Unknown content: " + id + "=" + value;
<% if (inboundTransport=="JDBC") { %>
        String inboundEndpoint = "jdbc://INSERT INTO " + IN_TABLE + "(ID, VALUE) VALUES ('" + id + "', '" + value + "')?connector=soitoolkit-jdbc-connector";
        String message = null;
<% } else if (inboundTransport=="JMS") { %>
        String inboundEndpoint = "jms://" + IN_QUEUE + "?connector=soitoolkit-jms-connector";
        String message = id + "=" + value;
<% } %>
        // Send a poisoned message to the in-endpoint and verify that the expected exception occurs in the ESB
        Exception exception = dispatchAndWaitForException(inboundEndpoint, message, null, 2000);
        assertTrue(exception instanceof TransformerMessagingException);
        assertTrue(exception.getCause() instanceof TransformerException);
        assertEquals(expectedErrMsg, exception.getCause().getMessage());

<% if (inboundTransport=="JDBC") { %>
        // Verify that the record still exists in the in-table (export table)
        int cntIn = jdbcTemplate.queryForInt("SELECT COUNT(*) FROM " + IN_TABLE);
        assertEquals("Record not found in in-table", 1, cntIn);

        // Allow for some background processing to complete so that the log-message is put on the error-log-queue before we check it
        try {
            Thread.sleep(250);
        } catch (InterruptedException e) {}

        // Verifying that we now have a log-message on the error-log-queue
        assertErrorLogMessages(1, expectedErrMsg);
<% } else if (inboundTransport=="JMS") { %>
        // Allow for some background processing to complete so that the message is put back to the in-queue for redelivery
        try {
        	Thread.sleep(750);
        } catch (InterruptedException e) {}

  <% if (outboundTransport=="JMS") { %>
        // Verify that two error-log-message is sent (for the first time and for the first re-delivery) but not yet anything of the deadletter queue...
        assertErrorLogMessages(2, expectedErrMsg);
        assertEquals("Incorrect number of DLQ-messages", 0, jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE).size());

        // Allow for some more background processing to complete so that the redelivery count is reached and the message is placed on the Dead Letter queue
        try {
        	Thread.sleep(1500);
        } catch (InterruptedException e) {}
  <% } %>

        // Verify that the message now is gone from the in-queue
        assertEquals("Sent message not removed", 0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());

        // Verify that the in-message now is found on the deadletter queue
        List<Message> msgs = jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE);
        assertEquals("Incorrect number of DLQ-messages", 1, msgs.size());
        String dlqMsg = ((TextMessage)msgs.get(0)).getText();
        assertEquals("Message on DLQ is not identical with the message sent", dlqMsg, message);

        // Verifying that we now have four identical log-messages on the error-log-queue
        // One message for the initial attempt and three more for the redeliveries
        assertErrorLogMessages(4, expectedErrMsg);
<% } %>

<% if (outboundTransport=="JMS") { %>
        // Verify as well that nothing is placed on the out-queue
        assertEquals("Unexpected message on out-queue", 0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());
<% } else if (outboundTransport=="JDBC") { %>
        // Verify as well that nothing is placed in the out-table (import table)
        int cntOut = jdbcTemplate.queryForInt("SELECT COUNT(*) FROM " + OUT_TABLE);
        assertEquals("Unexpected record in out-table", 0, cntOut);
<% } %>    
    }    

    private void assertErrorLogMessages(int noOfExpectedErrorLogMsgs, String expectedErrMsg) throws JMSException {
        List<Message> msgs = jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE);
        assertEquals("Incorrect number of error-messages", noOfExpectedErrorLogMsgs, msgs.size());
        int i = 0;
        for (Message errMessage : msgs) {
            i++;
            String errMsg = ((TextMessage)errMessage).getText();
            assertTrue("Expected error message not found in error-log-message #" + i, errMsg.contains(expectedErrMsg));
        }
    }
<% } %>    
}
