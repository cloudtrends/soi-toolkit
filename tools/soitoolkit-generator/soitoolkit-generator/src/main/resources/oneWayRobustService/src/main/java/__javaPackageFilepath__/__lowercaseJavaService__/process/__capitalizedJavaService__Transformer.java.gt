package ${javaPackage}.${lowercaseJavaService}.process;

import java.nio.charset.Charset;

import org.mule.api.transformer.TransformerException;
import org.mule.config.i18n.MessageFactory;
import org.mule.transformer.AbstractTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ${capitalizedJavaService}Transformer extends AbstractTransformer {

	private static final Logger log = LoggerFactory.getLogger(${capitalizedJavaService}Transformer.class);
	private static final Charset ENCODING_CHARSET_INBOUND = Charset.forName("UTF-8");
	private static final Charset ENCODING_CHARSET_OUTBOUND = Charset.forName("UTF-8");
	
	/**
	 * Simplest possible transformer that ...
	 * <p>Character encoding from/to byte[] is handled within this class to let
	 * other parts of the Mule-flow handle binary payloads and avoid encoding issues.
	 *
	 * @param src expects a byte[]
	 * @return a byte[]
	 */
	@Override
	protected Object doTransform(Object src, String encoding) throws TransformerException {

		String outMsg = null;
		
		// Simplest possible sample transformation, convert leading "A" to "1" and "B" to "2", throw an exception for all other input
		if (src instanceof byte[]) {
			String inMsg = new String((byte[]) src, ENCODING_CHARSET_INBOUND);

			if (inMsg.startsWith("A")) {
				log.debug("A message of type A is transformed to a message of type 1");
				outMsg = "1" + inMsg.substring(1);

			} else if (inMsg.startsWith("B")) {
				log.debug("A message of type B is transformed to a message of type 2");
				outMsg = "2" + inMsg.substring(1);
				
			} else {
				throw new TransformerException(MessageFactory.createStaticMessage("Unknown content: " + inMsg), this);
			}

		} else {
			throw new TransformerException(MessageFactory.createStaticMessage("Unknown source type: " + src.getClass().getName()), this);
		}
		
		// return byte[]
		return outMsg.getBytes(ENCODING_CHARSET_OUTBOUND);
	}
}