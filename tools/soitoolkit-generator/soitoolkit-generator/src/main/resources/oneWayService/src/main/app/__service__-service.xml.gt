<?xml version="1.0" encoding="utf-8"?>

<mule 
${xmlNamespace.onewayService}
	<!-- TODO: Add service specific definitions here -->
	<flow name="${service}-service">
<% if (inboundTransport=="VM") { %>
                <vm:inbound-endpoint path="${dollarSymbol}{${uppercaseService}_IN_VM_QUEUE}" transformer-refs="logMsgIn">
<% if (serviceTransactional) { %>
					<vm:transaction action="ALWAYS_BEGIN" />
<% } %> 
				</vm:inbound-endpoint>

<% } else if (inboundTransport=="JMS") { %>
                <jms:inbound-endpoint queue="${dollarSymbol}{${uppercaseService}_IN_QUEUE}" transformer-refs="logMsgIn jmsToStr">
<% if (serviceTransactional) { %>
					<jms:transaction action="ALWAYS_BEGIN" />
<% } %> 
				</jms:inbound-endpoint>

<% } else if (inboundTransport=="JDBC") { %> 
            	<jdbc:inbound-endpoint queryKey="${lowercaseJavaService}-export-query" transformer-refs="logMsgIn">
<% if (serviceTransactional) { %>
					<jdbc:transaction action="ALWAYS_BEGIN" />
<% } %> 
            	</jdbc:inbound-endpoint>
                <custom-transformer doc:name="transform-message" class="${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}ExportFromDbTransformer"/>

<% } else if (inboundTransport=="SERVLET" || inboundTransport=="HTTP") { %> 
				<inbound-endpoint address="${dollarSymbol}{${uppercaseService}_INBOUND_URL}"
					exchange-pattern="request-response"
					transformer-refs="createCorrId logMsgIn mimeToStr"
					responseTransformer-refs="logRespOut">
			    
			        <response>
				        <script:transformer>
				            <script:script engine="groovy">
				            	return "OK"
				            </script:script>
				        </script:transformer>
			        </response>
				</inbound-endpoint>

<% } else if (inboundTransport=="FILE") { %> 
				<file:inbound-endpoint
					path="${dollarSymbol}{${uppercaseService}_INBOUND_FOLDER}"
					pollingFrequency="${dollarSymbol}{${uppercaseService}_INBOUND_POLLING_MS}"
					fileAge="${dollarSymbol}{${uppercaseService}_INBOUND_FILE_AGE_MS}"
					moveToDirectory="${dollarSymbol}{${uppercaseService}_ARCHIVE_FOLDER}"
					moveToPattern="#[header:originalFilename]"
					transformer-refs="objToStr logMsgIn">
					<file:filename-wildcard-filter pattern="*.*"/>
				</file:inbound-endpoint>

<% } else if (inboundTransport=="FTP") { %> 
				<ftp:inbound-endpoint 
					name="${service}-inbound-endpoint"
					address="ftp://${dollarSymbol}{${uppercaseService}_INBOUND_FOLDER}"
					pollingFrequency="${dollarSymbol}{${uppercaseService}_INBOUND_POLLING_MS}"
					binary="false"
					passive="true"
					transformer-refs="objToStr logMsgIn">
					<file:filename-wildcard-filter pattern="*.*"/>
				</ftp:inbound-endpoint>			

<% } else if (inboundTransport=="SFTP") { %> 
				<sftp:inbound-endpoint
					name="${service}-inbound-endpoint"
					address="sftp://${dollarSymbol}{${uppercaseService}_INBOUND_SFTP_FOLDER}"
					pollingFrequency="${dollarSymbol}{${uppercaseService}_INBOUND_SFTP_POLLING_MS}"
					sizeCheckWaitTime="${dollarSymbol}{${uppercaseService}_INBOUND_SFTP_SIZECHECK_MS}"
					tempDir="sending"
					useTempFileTimestampSuffix="true"
					archiveDir="${dollarSymbol}{${uppercaseService}_ARCHIVE_FOLDER}"
					archiveTempReceivingDir="receiving"
					archiveTempSendingDir="sending"
					transformer-refs="objToStr logMsgIn">
					<file:filename-wildcard-filter pattern="*.*"/>
				</sftp:inbound-endpoint>			

<% } else if (inboundTransport=="POP3") { %> 
				<pop3:inbound-endpoint 
					host="${dollarSymbol}{${uppercaseService}_POP3_HOST}" 
					port="${dollarSymbol}{${uppercaseService}_POP3_PORT}"
					user="${dollarSymbol}{${uppercaseService}_POP3_USR}" 
					password="${dollarSymbol}{${uppercaseService}_POP3_PWD}" 
					transformer-refs="logMsgIn">
					<email:email-to-string-transformer/>
				</pop3:inbound-endpoint>		

<% } else if (inboundTransport=="IMAP") { %> 
				<imap:inbound-endpoint 
					host="${dollarSymbol}{${uppercaseService}_IMAP_HOST}" 
					port="${dollarSymbol}{${uppercaseService}_IMAP_PORT}"
					user="${dollarSymbol}{${uppercaseService}_IMAP_USR}" 
					password="${dollarSymbol}{${uppercaseService}_IMAP_PWD}" 
					transformer-refs="logMsgIn">
					<email:email-to-string-transformer/>
				</imap:inbound-endpoint>		
<% } %> 
                <custom-transformer class="${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}Transformer"/>

<% if (outboundTransport=="VM") { %>
                <vm:outbound-endpoint 
                    path="${dollarSymbol}{${uppercaseService}_OUT_VM_QUEUE}" 
                    transformer-refs="logMsgOut">
<% if (serviceTransactional) { %>
					<vm:transaction action="ALWAYS_JOIN" />
<% } %> 
				</vm:outbound-endpoint>

<% } else if (outboundTransport=="JMS") { %>
                <jms:outbound-endpoint 
                    queue="${dollarSymbol}{${uppercaseService}_OUT_QUEUE}" 
                    transformer-refs="strToJms logMsgOut">
<% if (serviceTransactional) { %>
					<jms:transaction action="ALWAYS_JOIN" />
<% } %> 
				</jms:outbound-endpoint>

<% } else if (outboundTransport=="JDBC") { %>
                <custom-transformer class="${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}ImportToDbTransformer"/>
            	<jdbc:outbound-endpoint queryKey="${lowercaseJavaService}-import-query" transformer-refs="logMsgOut">
<% if (serviceTransactional) { %>
					<jdbc:transaction action="ALWAYS_JOIN" />
<% } %> 
				</jdbc:outbound-endpoint>

<% } else if (outboundTransport=="FILE") { %> 
				<file:outbound-endpoint 
					path="${dollarSymbol}{${uppercaseService}_OUTBOUND_FOLDER}"
<% if (inboundEndpointFilebased) { %>
					outputPattern="#[header:originalFilename]"
<% } else { %> 
					outputPattern="${dollarSymbol}{${uppercaseService}_OUTBOUND_FILE}"
<% } %> 
                    transformer-refs="logMsgOut"/>

<% } else if (outboundTransport=="FTP") { %> 
				<ftp:outbound-endpoint
					name="${service}-outbound-endpoint"
					address="ftp://${dollarSymbol}{${uppercaseService}_OUTBOUND_FOLDER}"
<% if (inboundEndpointFilebased) { %>
					outputPattern="#[header:originalFilename]"
<% } else { %> 
					outputPattern="${dollarSymbol}{${uppercaseService}_OUTBOUND_FILE}"
<% } %> 
                    binary="false"
                    passive="true"
                    transformer-refs="logMsgOut" />                                        

<% } else if (outboundTransport=="SFTP") { %> 
				<vm:outbound-endpoint path="${service}-service" />

<% } else if (outboundTransport=="SMTP") { %> 
				<smtp:outbound-endpoint 
					host="${dollarSymbol}{${uppercaseService}_SMTP_HOST}" 
					port="${dollarSymbol}{${uppercaseService}_SMTP_PORT}"
					from="${dollarSymbol}{${uppercaseService}_OUTBOUND_EMAIL_FROM}"
					to="${dollarSymbol}{${uppercaseService}_OUTBOUND_EMAIL_TEST_TO}"
					subject="${dollarSymbol}{${uppercaseService}_OUTBOUND_EMAIL_SUBJECT}">
					<transformer ref="logMsgOut"/>
					<email:string-to-email-transformer/>
				</smtp:outbound-endpoint>
<% } %>
			<custom-exception-strategy class="org.soitoolkit.commons.mule.error.ServiceExceptionStrategy"/>

	</flow>

<% if (outboundTransport=="SFTP") { %> 
	<flow name="${service}-receiver-service">
				<vm:inbound-endpoint address="vm://${service}-service" />

				<sftp:outbound-endpoint
					name="${service}-outbound-endpoint"
					address="sftp://${dollarSymbol}{${uppercaseService}_OUTBOUND_SFTP_FOLDER}"
<% if (inboundEndpointFilebased) { %>
<% if (inboundTransport=="FTP") { %> 
					outputPattern="#[header:INBOUND:originalFilename]"
<% } else { %> 
					outputPattern="#[header:originalFilename]"
<% } %> 
<% } else { %> 
					outputPattern="${dollarSymbol}{${uppercaseService}_OUTBOUND_FILE}"
<% } %> 
					tempDir="receiving"
					useTempFileTimestampSuffix="true"
					duplicateHandling="addSeqNo"
					transformer-refs="logMsgOut"/>
    </flow>

	<flow name="${service}-resend-from-archive-service">
				<file:inbound-endpoint
					path="${dollarSymbol}{${uppercaseService}_ARCHIVE_FOLDER}/resend"
					moveToDirectory="${dollarSymbol}{${uppercaseService}_ARCHIVE_FOLDER}"
					pollingFrequency="${dollarSymbol}{${uppercaseService}_ARCHIVE_RESEND_POLLING_MS}"
				/>

				<outbound-endpoint address="vm://${service}-service" />
	</flow>		
<% } %> 
</mule>