package ${javaPackage}.${lowercaseJavaService};

import java.util.StringTokenizer;

import org.mule.api.ExceptionPayload;
import org.mule.api.MuleMessage;
import org.mule.api.transformer.TransformerException;
import org.mule.transformer.AbstractMessageTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<% if (inboundTransport=="RESTHTTP" || outboundTransport=="RESTHTTP") { %>
import org.soitoolkit.commons.mule.jaxb.JaxbUtil;
import org.soitoolkit.refapps.sd.sample.schema.v1.FaultInfo;
import org.soitoolkit.refapps.sd.sample.schema.v1.SampleResponse;
<% } %>
public class ${capitalizedJavaService}ResponseTransformer extends AbstractMessageTransformer {

	private static final Logger log = LoggerFactory.getLogger(${capitalizedJavaService}ResponseTransformer.class);
<% if (outboundTransport=="RESTHTTP") { %>
	private static final JaxbUtil jaxbUtil = new JaxbUtil(SampleResponse.class);
<% } %>
    /**
     * Message aware transformer that ...
     */
    @Override
    public Object transformMessage(MuleMessage message, String outputEncoding) throws TransformerException {

        // Perform any message aware processing here, otherwise delegate as much as possible to doTransform() for easier unit testing
<% if (inboundTransport=="RESTHTTP") { %>
        if (message.getExceptionPayload() != null) {
            return createFault(message.getExceptionPayload());
        }
<% } %>
        return pojoTransform(message.getPayload(), outputEncoding);
    }
    
    /**
     * Simple pojo transformer method that can be tested with plain unit testing...
     */
    public Object pojoTransform(Object src, String outputEncoding) throws TransformerException {
        log.debug("Transforming payload: {}", src);

<% if (outboundTransport=="SOAPHTTP") { %>
		return src;
<% } else if (outboundTransport=="RESTHTTP") { %>
		SampleResponse request = new SampleResponse();
		request.setValue(src.toString());
		String xml = jaxbUtil.marshal(request);
		return xml;
		
<% } else { %>
		StringTokenizer st = new StringTokenizer((String)src, ",");
		String msgType = st.nextToken().trim();
		String value = st.nextToken().trim();

		String xml = null;
		
		if (msgType.equals("msg-0001-resp")) {
			xml = 
			"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +
			"<sampleResponse xmlns=\"urn:org.soitoolkit.refapps.sd.sample.schema:v1\">" +
			"<value>" + value + "</value>" +
			"</sampleResponse>";

		} else if (msgType.equals("msg-error")) {
			
			String errorMessage = value;
			xml = createFault(errorMessage);
			
		} else {

			String errorMessage = "Unknown message type: " + msgType;
			xml = createFault(errorMessage);

		}

		return xml;
<% } %>
	}
<% if (inboundTransport=="SOAPHTTP") { %>
	private String createFault(String errorMessage) {
		return 
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +
		"<soap:Fault xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + 
		"<faultcode>soap:Server</faultcode>" + 
		"<faultstring>" + errorMessage + "</faultstring>" + 
		"</soap:Fault>";
	}
<% } else if (inboundTransport=="RESTHTTP") { %>

    // TODO: Move to soitoolkit-commons-mule?
    private String createFault(ExceptionPayload ep) {
        // Pick out the most specific exception info and return it
        String errMsg;
        if (ep.getRootException() != null) {
            errMsg = ep.getRootException().getMessage();

        } else if (ep.getException() != null) {
            errMsg = ep.getException().getMessage();
        
        } else {
            errMsg = ep.getMessage();
        }

        log.warn("transformer caught an exception payload: {}", errMsg);
        return createFault(errMsg);
    }

    private JaxbUtil ju = new JaxbUtil(FaultInfo.class);
    private String createFault(String errorMessage) {
        FaultInfo fi = new FaultInfo();
        fi.setMessage(errorMessage);
        return ju.marshal(fi);
    }
<% } %>
}