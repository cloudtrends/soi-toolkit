package ${javaPackage}.${lowercaseJavaService};

<% if (inboundTransport=="SERVLET") { %>
import static org.soitoolkit.commons.mule.mime.MimeUtil.sendFileAsMultipartHttpPost;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.getAddressForServletTransport;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.MULE_SERVER_ID;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.HTTP_PORT;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.CONTEXT_PATH;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.MULE_SERVLET_URI;
<% } %> 
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;

import org.mule.api.MuleMessage;
import org.mule.api.transformer.TransformerException;
import org.mule.transport.sftp.SftpConnector;
import org.soitoolkit.commons.mule.sftp.SftpUtil;
import org.soitoolkit.commons.mule.test.AbstractJmsTestUtil;
<% if (inboundTransport=="SERVLET") { %>
import org.soitoolkit.commons.mule.test.AbstractTestCaseWithServletEngine;
<% } else { %> 
import org.soitoolkit.commons.mule.test.AbstractTestCase;
<% } %> 

import org.soitoolkit.commons.mule.test.ActiveMqJmsTestUtil;
import org.soitoolkit.commons.mule.test.Dispatcher;
import org.soitoolkit.commons.mule.util.MiscUtil;

<% if (inboundTransport=="SERVLET") { %>
public class ${capitalizedJavaService}IntegrationTest extends AbstractTestCaseWithServletEngine {
<% } else { %> 
public class ${capitalizedJavaService}IntegrationTest extends AbstractTestCase {
<% } %> 
	
	private static final ResourceBundle rb = ResourceBundle.getBundle("${configPropertyFile}");
<% if (inboundTransport=="JMS") { %>
	private static final String IN_QUEUE         = rb.getString("${uppercaseService}_IN_QUEUE");
	private static final String DEADLETTER_QUEUE = rb.getString("${uppercaseService}_DL_QUEUE");
<% } %> 

<% if (outboundTransport=="JMS") { %>
	private static final String OUT_QUEUE        = rb.getString("${uppercaseService}_OUT_QUEUE");
<% } %> 

	private static final String ERROR_LOG_QUEUE = "${jmsLogErrorQueue}";
	private AbstractJmsTestUtil jmsUtil = null;
	
	/**
	 *
     * DLQ tests expects the following setup in activemq.xml (in the <policyEntry> - element):
     *                   <deadLetterStrategy>
     *                     <!--
     *                      Use the prefix 'DLQ.' for the destination name, and make
     *                      the DLQ a queue rather than a topic
     *                     -->
     *                     <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
     *                   </deadLetterStrategy>
     * 
	 */
    public ${capitalizedJavaService}IntegrationTest() {
    	
<% if (inboundTransport=="SERVLET") { %>
    	// Initialize servlet engine in baseclass with proper values
    	super(MULE_SERVER_ID, HTTP_PORT, CONTEXT_PATH, MULE_SERVLET_URI);
<% } %> 
    	// TODO: Should this be placed in the baseclass?
    	
    	// Only start up Mule once to make the tests run faster...
    	// Set to false if tests interfere with each other when Mule is started only once.
        setDisposeManagerPerSuite(true);

		// Increase the default 120 sec so that you have a chance to debug...
        setTestTimeoutSecs(120);
    }

	protected String getConfigResources() {
		return "soitoolkit-mule-jms-connector-activemq-embedded.xml," + 
		"${artifactId}-common.xml," +
		"services/${service}-service.xml," +
		"teststub-services/${service}-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		// TODO: Fix lazy init of JMS connection et al so that we can create jmsutil in the declaration
		// (The embedded ActiveMQ queue manager is not yet started by Mule when jmsutil is delcared...)
		if (jmsUtil == null) jmsUtil = new ActiveMqJmsTestUtil();
		
<% if (inboundTransport=="JMS") { %>
		// Clear queues used for the inbound endpoint
		jmsUtil.clearQueues(IN_QUEUE, DEADLETTER_QUEUE);
<% } %> 
		
<% if (outboundTransport=="JMS") { %>
		// Clear queues used for the outbound endpoint
		jmsUtil.clearQueues(OUT_QUEUE);
<% } %> 

		// Clear queues used for error handling
		jmsUtil.clearQueues(ERROR_LOG_QUEUE);
		

<% if (inboundTransport=="SFTP") { %>
		// Clear sftp-directories used for inbound endpoint
		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-sender-service"},
			new String[] {"${service}-inbound-endpoint"});		
<% } %> 
		
<% if (outboundTransport=="SFTP") { %>
		// Clear sftp-directories used for outbound endpoint
		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-resend-from-archive-service", "${service}-teststub-service"},
			new String[] {"${service}-outbound-endpoint"});		
<% } %> 
    }

    public void test${capitalizedJavaService}_ok() throws JMSException {

		Map<String, String> props = new HashMap<String, String>();
    	final  String inputFile   = "src/test/resources/testfiles/${service}-input.txt";
    	String expectedResultFile = "src/test/resources/testfiles/${service}-expected-result.txt";
        String receivingService   = "${service}-teststub-service";
		final  int timeout        = 5000;

		String input          = MiscUtil.readFileAsString(inputFile);
		String expectedResult = MiscUtil.readFileAsString(expectedResultFile);

<% if (inboundTransport=="JMS") { %>
		// Setup inbound endpoint for jms
		String inboundEndpoint = "jms://" + IN_QUEUE;

<% } else if (inboundTransport=="SFTP") { %>
		// Setup inbound endpoint for sftp
        String inFolder        = rb.getString("${uppercaseService}_SENDER_SFTP_ADDRESS");
        String inboundEndpoint = "sftp://" + inFolder;
		String filename        = "testfile.txt";
		props.put(SftpConnector.PROPERTY_FILENAME, filename);

<% } else if (inboundTransport=="SERVLET") { %>
		final String url       = getAddressForServletTransport("${uppercaseService}_INBOUND_SERVLET_URI");
		Dispatcher dispatcher = new Dispatcher() {
			public void doDispatch() {
				sendFileAsMultipartHttpPost(url, new File(inputFile), false, timeout);
			}
		};
<% } %> 

<% if (inboundTransport=="SERVLET") { %>
		// Invoke the service and wait for the transformed message to arrive at the receiving teststub service
		MuleMessage reply = dispatchAndWaitForServiceComponent(dispatcher, receivingService, timeout);
<% } else { %> 
		// Invoke the service and wait for the transformed message to arrive at the receiving teststub service
		MuleMessage reply = dispatchAndWaitForServiceComponent(inboundEndpoint, input, props, receivingService, timeout);
<% } %> 
		String transformedMessage = reply.getPayload().toString();

		// Verify the result, i.e. the transformed message
        assertEquals(expectedResult, transformedMessage);

<% if (inboundTransport=="JMS") { %>
		// Verify inbound jms-queues
        assertEquals(0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());
        assertEquals(0, jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE).size());
<% } %> 

<% if (outboundTransport=="JMS") { %>
		// Verify outbound jms-queues
        assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());
<% } %> 

		// Verify error-queue
        assertEquals(0, jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE).size());
    }

<% if (inboundTransport=="JMS" && outboundTransport=="JMS" ) { %>
    /**
     * Verifies error handling with regards to:
     * - transaction-handling 
     * - DLQ-handling
     * - retry-policy 
     * - logging error information to error-queue
     * 
     * @throws JMSException
     */
    public void test${capitalizedJavaService}_transformationError() throws JMSException {
        
		String message = "Cnnn";
        String expectedErrMsg="Unknown content: " + message;

        Exception exception = dispatchAndWaitForException("jms://" + IN_QUEUE, message, null, 2000);
        assertEquals(TransformerException.class, exception.getClass());
        assertEquals(expectedErrMsg, exception.getMessage());

        // Allow some background processing to complete, e.g. move poison message to DLQ and post error-message to error-log-queue
        try {
			Thread.sleep(50);
		} catch (InterruptedException e) {}
        
        assertEquals("Unexpected message on out-queue", 0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());

        assertEquals("Sent message not removed", 0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());
        
        List<Message> msgs = jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE);
        assertEquals("Incorrect number of DLQ-messages", 1, msgs.size());
        String dlqMsg = ((TextMessage)msgs.get(0)).getText();
        assertEquals("Message on DLQ is not identical with the message sent", dlqMsg, message);
        
        msgs = jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE);
        assertEquals("Incorrect number of error-messages", 1, msgs.size());
        String errMsg = ((TextMessage)msgs.get(0)).getText();
        assertTrue("Expected error message not found", errMsg.contains(expectedErrMsg));
    }
<% } %>    
}