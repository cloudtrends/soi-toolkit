package ${javaPackage}.${lowercaseService};

import static org.mule.context.notification.EndpointMessageNotification.MESSAGE_RECEIVED;

import java.util.List;
import java.util.ResourceBundle;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;

import org.mule.api.MuleMessage;
import org.mule.api.transformer.TransformerException;
import org.soitoolkit.commons.mule.test.AbstractJmsTestUtil;
import org.soitoolkit.commons.mule.test.AbstractTestCase;
import org.soitoolkit.commons.mule.test.ActiveMqJmsTestUtil;

public class ${capitalizedService}IntegrationTest extends AbstractTestCase {
	
	private static final ResourceBundle rb = ResourceBundle.getBundle("${configPropertyFile}");
	private static final String IN_QUEUE         = rb.getString("${uppercaseService}_IN_QUEUE");
	private static final String OUT_QUEUE        = rb.getString("${uppercaseService}_OUT_QUEUE");
	private static final String DEADLETTER_QUEUE = rb.getString("${uppercaseService}_DL_QUEUE");
	private static final String ERROR_LOG_QUEUE  = "${jmsLogErrorQueue}";
	
	private AbstractJmsTestUtil jmsUtil = null;
	
	/**
	 *
     * DLQ tests expects the following setup in activemq.xml (in the <policyEntry> - element):
     *                   <deadLetterStrategy>
     *                     <!--
     *                      Use the prefix 'DLQ.' for the destination name, and make
     *                      the DLQ a queue rather than a topic
     *                     -->
     *                     <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
     *                   </deadLetterStrategy>
     * 
	 */
    public ${capitalizedService}IntegrationTest() {
    	
    	// TODO: Should this be placed in tha baseclass?
    	
    	// Only start up Mule once to make the tests run faster...
    	// Set to false if tests interfere with each other when Mule is started only once.
        setDisposeManagerPerSuite(true);

		// Increase the default 120 sec so that you have a chance to debug...
        setTestTimeoutSecs(120);
    }

	protected String getConfigResources() {
		return "soitoolkit-mule-jms-connector-activemq-embedded.xml," + 
		"${artifactId}-common.xml," +
		"services/${service}-service.xml," +
		"teststub-services/${service}-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		// TODO: Fix lazy init of JMS connectiopn et al so that we can create jmsutil in the declaration
		if (jmsUtil == null) jmsUtil = new ActiveMqJmsTestUtil();
		
		jmsUtil.clearQueues(IN_QUEUE, OUT_QUEUE, DEADLETTER_QUEUE, ERROR_LOG_QUEUE);
    }

    public void test${capitalizedService}_ok() throws JMSException {

		String message = "Annn";
        MuleMessage reply = dispatchAndWaitForDelivery("jms://" + IN_QUEUE, message, null, "${service}-teststub-endpoint", MESSAGE_RECEIVED, 2000);
        String transformedMessage = ((TextMessage)reply.getPayload()).getText();
        assertEquals("1nnn", transformedMessage);

		message = "Bnnn";
        reply = dispatchAndWaitForDelivery("jms://" + IN_QUEUE, message, null, "${service}-teststub-endpoint", MESSAGE_RECEIVED, 2000);
        transformedMessage = ((TextMessage)reply.getPayload()).getText();
        assertEquals("2nnn", transformedMessage);

        assertEquals(0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());
        assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());
        assertEquals(0, jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE).size());
        assertEquals(0, jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE).size());
    }

    /**
     * Verifies error handling with regards to:
     * - transaction-handling 
     * - DLQ-handling
     * - retry-policy 
     * - logging error information to error-queue
     * 
     * @throws JMSException
     */
    public void test${capitalizedService}_transformationError() throws JMSException {
        
		String message = "Cnnn";
        String expectedErrMsg="Unknown content: " + message;

        Exception exception = dispatchAndWaitForException("jms://" + IN_QUEUE, message, null, 2000);
        assertEquals(TransformerException.class, exception.getClass());
        assertEquals(expectedErrMsg, exception.getMessage());

        // Allow some background processing to complete, e.g. move poison message to DLQ and post error-message to error-log-queue
        try {
			Thread.sleep(50);
		} catch (InterruptedException e) {}
        
        assertEquals("Unexpected message on out-queue", 0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());

        assertEquals("Sent message not removed", 0, jmsUtil.browseMessagesOnQueue(IN_QUEUE).size());
        
        List<Message> msgs = jmsUtil.browseMessagesOnQueue(DEADLETTER_QUEUE);
        assertEquals("Incorrect number of DLQ-messages", 1, msgs.size());
        String dlqMsg = ((TextMessage)msgs.get(0)).getText();
        assertEquals("Message on DLQ is not identicalt with the message sent", dlqMsg, message);
        
        msgs = jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE);
        assertEquals("Incorrect number of error-messages", 1, msgs.size());
        String errMsg = ((TextMessage)msgs.get(0)).getText();
        assertTrue("Expected error message not found", errMsg.contains(expectedErrMsg));

    }
}