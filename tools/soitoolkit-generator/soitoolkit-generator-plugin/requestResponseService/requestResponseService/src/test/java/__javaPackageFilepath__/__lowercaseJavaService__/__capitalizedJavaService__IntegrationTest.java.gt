package ${javaPackage}.${lowercaseJavaService};

<% if (inboundTransport=="SOAPSERVLET") { %>
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.CONTEXT_PATH;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.HTTP_PORT;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.MULE_SERVER_ID;
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.MULE_SERVLET_URI;
<% } %> 
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.getAddress;

import static ${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}TestProducer.TEST_ID_OK;
import static ${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}TestProducer.TEST_ID_FAULT_INVALID_ID;
import static ${javaPackage}.${lowercaseJavaService}.${capitalizedJavaService}TestProducer.TEST_ID_FAULT_TIMEOUT;

import javax.xml.ws.soap.SOAPFaultException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.soitoolkit.commons.mule.test.AbstractJmsTestUtil;

<% if (inboundTransport=="SOAPSERVLET") { %>
import org.soitoolkit.commons.mule.test.AbstractTestCaseWithServletEngine;
<% } else { %> 
import org.soitoolkit.commons.mule.test.AbstractTestCase;
<% } %> 
import org.soitoolkit.commons.mule.util.RecursiveResourceBundle;
import org.soitoolkit.commons.mule.test.ActiveMqJmsTestUtil;
import org.soitoolkit.refapps.sd.sample.schema.v1.SampleResponse;
import org.soitoolkit.refapps.sd.sample.wsdl.v1.Fault;
import org.soitoolkit.commons.mule.util.RecursiveResourceBundle;

<% if (inboundTransport=="SOAPSERVLET") { %>
public class ${capitalizedJavaService}IntegrationTest extends AbstractTestCaseWithServletEngine {
<% } else { %> 
public class ${capitalizedJavaService}IntegrationTest extends AbstractTestCase {
<% } %> 
	
	private static final Logger log = LoggerFactory.getLogger(${capitalizedJavaService}IntegrationTest.class);
	private static final RecursiveResourceBundle rb = new RecursiveResourceBundle("${configPropertyFile}", "${securityPropertyFile}");

	private static final long   SERVICE_TIMOUT_MS = Long.parseLong(rb.getString("SERVICE_TIMEOUT_MS"));
	private static final String EXPECTED_ERR_TIMEOUT_MSG = "Response timed out (" + SERVICE_TIMOUT_MS + "ms) waiting for message response id ";

	private static final String DEFAULT_SERVICE_ADDRESS = getAddress("${uppercaseService}_INBOUND_URL");

<% if (outboundTransport=="JMS") { %>
	private static final String REQUEST_QUEUE   = rb.getString("${uppercaseService}_REQUEST_QUEUE");
	private static final String RESPONSE_QUEUE  = rb.getString("${uppercaseService}_RESPONSE_QUEUE");
<% } %> 
	private static final String ERROR_LOG_QUEUE = "${jmsLogErrorQueue}";
	private AbstractJmsTestUtil jmsUtil = null;

    public ${capitalizedJavaService}IntegrationTest() {
<% if (inboundTransport=="SOAPSERVLET") { %>
    	// Initialize servlet engine in baseclass with proper values
    	super(MULE_SERVER_ID, HTTP_PORT, CONTEXT_PATH, MULE_SERVLET_URI);
<% } %> 
    	// TODO: Should this be placed in the baseclass?

    	// Only start up Mule once to make the tests run faster...
    	// Set to false if tests interfere with each other when Mule is started only once.
        setDisposeManagerPerSuite(true);

		// Increase the default 120 sec so that you have a chance to debug...
        setTestTimeoutSecs(120);
    }

	protected String getConfigResources() {
		return "soitoolkit-mule-jms-connector-activemq-embedded.xml," + 
<% if (inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
        "soitoolkit-mule-jdbc-datasource-hsql-embedded.xml," +
		"${artifactId}-jdbc-connector.xml," +
<% } %>  
		"${artifactId}-common.xml," +
		"services/${service}-service.xml," +
		"teststub-services/${service}-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		doSetUpJms();
    }

	private void doSetUpJms() {
		// TODO: Fix lazy init of JMS connection et al so that we can create jmsutil in the declaration
		// (The embedded ActiveMQ queue manager is not yet started by Mule when jmsutil is delcared...)
		if (jmsUtil == null) jmsUtil = new ActiveMqJmsTestUtil();
		
<% if (outboundTransport=="JMS") { %>
		// Clear queues used for the outbound endpoint
		jmsUtil.clearQueues(REQUEST_QUEUE);
		jmsUtil.clearQueues(RESPONSE_QUEUE);
<% } %> 
		// Clear queues used for error handling
		jmsUtil.clearQueues(ERROR_LOG_QUEUE);
    }

    public void test_ok() throws Fault {
    	String id = TEST_ID_OK;
    	${capitalizedJavaService}TestConsumer consumer = new ${capitalizedJavaService}TestConsumer(DEFAULT_SERVICE_ADDRESS);
		SampleResponse response = consumer.callService(id);
		assertEquals("Value" + id,  response.getValue());
	}

	public void test_fault_invalidInput() throws Fault {
		try {
	    	String id = TEST_ID_FAULT_INVALID_ID;
	    	${capitalizedJavaService}TestConsumer consumer = new ${capitalizedJavaService}TestConsumer(DEFAULT_SERVICE_ADDRESS);
			Object response = consumer.callService(id);
	        fail("expected fault, but got a response of type: " + ((response == null) ? "NULL" : response.getClass().getName()));
	    } catch (SOAPFaultException e) {
<% if (outboundTransport=="SOAPHTTP") { %>
	    	assertEquals("Invalid status code: 500", e.getMessage());
<% } else if (outboundTransport=="RESTHTTP") { %>
	    	assertEquals("Internal Server Error, code: 500", e.getMessage());
<% } else if (outboundTransport=="JMS") { %>
	    	assertEquals("Invalid Id: " + TEST_ID_FAULT_INVALID_ID, e.getMessage());
<% } %> 
	    }
	}

	public void test_fault_timeout() throws Fault {
        try {
	    	String id = TEST_ID_FAULT_TIMEOUT;
	    	${capitalizedJavaService}TestConsumer consumer = new ${capitalizedJavaService}TestConsumer(DEFAULT_SERVICE_ADDRESS);
			Object response = consumer.callService(id);
	        fail("expected fault, but got a response of type: " + ((response == null) ? "NULL" : response.getClass().getName()));
        } catch (SOAPFaultException e) {
/*
			ISSUE 116: PROBLEM WITH ERROR HANDLING, NULL IS RETURNED INSTEAD OF A RELEVANT ERROR MESSAGE, SEE http://code.google.com/p/soi-toolkit/issues/detail?id=116
            assertTrue("Unexpected error message: " + e.getMessage(), e.getMessage().startsWith(EXPECTED_ERR_TIMEOUT_MSG));
*/
        	assertNull(e.getMessage());
        }

		// Sleep for a short time period  to allow the JMS response message to be delivered, otherwise ActiveMQ data store seems to be corrupt afterwards...
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {}
    }
}
