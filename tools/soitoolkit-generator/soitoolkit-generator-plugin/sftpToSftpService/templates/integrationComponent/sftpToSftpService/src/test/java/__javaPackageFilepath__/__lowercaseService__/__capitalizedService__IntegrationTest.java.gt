package ${javaPackage}.${lowercaseService};

import java.util.HashMap;
import java.util.Map;

import org.mule.api.MuleMessage;
import org.mule.transport.sftp.SftpConnector;
import org.soitoolkit.commons.mule.sftp.SftpUtil;
import org.soitoolkit.commons.mule.test.AbstractTestCase;

public class ${capitalizedService}IntegrationTest extends AbstractTestCase {
	
    public ${capitalizedService}IntegrationTest() {
    	
    	// TODO: Should this be placed in tha baseclass?
    	
    	// Only start up Mule once to make the tests run faster...
    	// Set to false if tests interfere with each other when Mule is started only once.
        setDisposeManagerPerSuite(true);

		// Increase the default 1200 sec so that you have a chance to debug...
        setTestTimeoutSecs(120);
    }

	protected String getConfigResources() {
		return "soitoolkit-mule-jms-connector-activemq-embedded.xml," +
			"soitoolkit-mule-sftp-connector.xml," +
			"${artifactId}-common.xml," +
			"services/${service}-service.xml," +
			"teststub-services/${service}-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-sender-service", "${service}-restart-from-archive-service", "${service}-teststub-service"},
			new String[] {"${service}-inbound-endpoint", "${service}-outbound-endpoint"});		
    }

    public void test${capitalizedService}_ok() throws Exception {

		// TODO: Replace with name of endpoint
    	String inFolder         = "muletest1@localhost/~/sftp/${lowercaseService}/sender";
		String filename         = "testfile.txt";
		String content          = "Annn";
        String expectedResult   = "1nnn\\n";
        String receivingService = "${service}-teststub-service";
		int    timeout          = 10000;

		Map<String, String> props = new HashMap<String, String>(1);
		props.put(SftpConnector.PROPERTY_FILENAME, filename);

		MuleMessage reply = dispatchAndWaitForServiceComponent("sftp://" + inFolder, content, props, receivingService, timeout);

		String transformedMessage = reply.getPayload().toString();
		assertEquals(expectedResult, transformedMessage);
    }
}
