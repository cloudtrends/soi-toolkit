created mule-3.1.deps.pom
=========================

copied mule 3.0.1-deps.pom

updated mule-3.1-deps:
========================
		<cxf-gen.version>2.3.0</cxf-gen.version>
		<mule.version>3.1.0</mule.version>
		<cxf.version>2.3.0</cxf.version>

Markerar alla ändringar för Mule 3.1 med FIXME kommentar
========================================================

Där jag hittat icke bakåtkompatibla ändringar, dvs som inte kompilerar mot Mule 2.2.1 så har jag comittat en kommentar i källkoden som börjar med "FIXME: Mule 3.1" samt kod för Mule 3.1 fast bortkommenterad.

added to commons-mule/pom.xml (går ej att lägga i mule-3.1-deps eftersom den är provided?):
===========================================================================================
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty</artifactId>
			<scope>test</scope>
			<version>${jetty.version}</version>
		</dependency>
		
		
		
commons-mule/pom.xml
====================

ersatter:
      <artifactId>soitoolkit-mule-2.2.1-dependencies</artifactId>
med:
      <artifactId>soitoolkit-mule-3.1.0-dependencies</artifactId>
		

MuleForge projects compatible with Mule 3.1???
==============================================
1. sftp-transport
2. common retry policies
3. smooks-module
4. jersey-transport

Behövs ObjectToJMSMessageTransformer.java längre???
===================================================

Dels rensar den undan proeprties som nu Mule 3.1 border sköta (på något sätt)
Dels hakar den in hantering av XMLStreamReader-payloads, något som kanske Mule 3.1 oxå klarar av numer???

Exception handling
==================

1. org.soitoolkit.commons.mule.error.ExceptionHandler bortkommenterat beroende till Mule api i nuläget...
2. org.soitoolkit.commons.mule.test.AbstractTestCase  bortkommenterat beroende till Mule api i nuläget...

http://www.mulesoft.org/documentation/display/MULE3USER/Error+Handling
----------------------------------------------------------------------
configure the <default-service-exception-strategy> element
To implement your own strategy, your class can extend org.mule.exception.AbstractExceptionListener,
but a recommended approach is to extend org.mule.exception.DefaultServiceExceptionStrategy 
and just overload the defaultHandler() method. You can set bean properties on your custom exception strategy
in the same way as other Mule-configured objects using a <properties> element.

http://www.mulesoft.org/documentation/display/MULE3USER/Exception+Handling
--------------------------------------------------------------------------
public interface MessagingExceptionHandler
public interface SystemExceptionHandler

http://markmail.org/message/qpof4bek7s6zf2ks?q=mule+SystemExceptionHandler+order:date-backward&page=1
-----------------------------------------------------------------------------------------------------
Could you try creating a MuleContextAware<http://www.mulesoft.org/docs/site/3.0.1/apidocs/org/mule/api/context/MuleContextAware.html> Spring bean that would call setSystemExceptionListener on the MuleContext it receives by Spring injection?

...it turns out that what I was getting was a service exception, not a system exception, 
and I was suppressing the exception - so it was being logged by Listener - once I stopped suppressing
the exception, it gets handled by the custom exception strategy configured on my service.


MuleUtil.getMuleContext() måste bort
====================================
Då måste oxå MuleUtil.getSpringBean(String beanName) bort, bara MuleUtil.getSpringBean(MuleContext muleContext, String beanName) som blir kvar...
Påverkar:
1. JdbcUtil.lookupDataSource(String ds)
  - jdbc-test-setup metoder skall ändras så att de använder denna metod!
2. EventLogger.getSession() (jms)
  - ExceptionHandler.java
  - LogTransformer.java
  - SftpTransportNotificationListener.java
  - andra t ex refapp.bmp.action.OrderAssignmentHandler + några från VGR tror jag...
3. MonitorEndpointHelper, används inte idag.

AbstractMessageAwareTransformer deprecated
==========================================  
 * <code>AbstractMessageAwareTransformer</code> is the superclass for pre-MULE 3.0 message transformers.  Newly
 * created message transformers should derive from AbstractMessageTransformer.
 
 
 FILER ATT TA BORT
 =================
 
 soitoolkit-log-service.xml
 soitoolkit-mule-jms-connector-activemq-labb.xml
 soitoolkit-mule-n.n.n-dependencies alla utan för 3.1.0
 MuleVersionEnum alla utan 3.1.0
 ExceptionHandler.java, ersätts av något annat
 
  