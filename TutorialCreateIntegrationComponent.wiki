#summary Tutorial on how to create an Integration Component.

= Introduction =

Integration components are used to contain Mule ESB based services and integrations.

This tutorial helps you to create your first integration component.

*NOTE*: Prerequisites for this tutorial is that the [InstallationGuide installation guide] is completed.

=Create Integration component=
 * Select the menu "File --> New --> Other" and expand the wizard "SOI Toolkit Code Generator"
 * Select the code generator "Create a new component"

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent1.png

 * Click on the "Next >" button
 The wizard "SOI Toolkit - Create a new Component" opens up
  * Select the component type "Intergation Component" in the radio button control named "Type of component"
  * Specify a proper name of the component in the field "Artifact Id"
  * Specify a proper group name in the field "Group Id"
  * Select where you want the files to be created in the field "Root folder"
  Note: The pre-selected root folder is picked up from the preference page you filled in during the installation of the soi-toolkit plugin.

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent2.png

 * Click on the "Next >" button
 The wizard now displays a new page where you can perform some initial configuration of the new integration component
  * In the drop down box called "Mule version" you can select what version of Mule you want the integration component to use.
  NOTE: Only v2.2.1 and v3.0.0 are available through public Maven repositories so if you choose another version you have to assure that the selected version is available in your organizations local maven repository!
  * Select when transports you want initial support for
  The generator will add connectors for these transports

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent3.png

 * Click on the "Finish" button
 The wizard now starts to execute and logs its output to a text area.

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent4.png

 * The following work is performed by the wizard:
  * Created folders and files according to the input on the previous page.
  * Launch maven to do a initial build and also create eclipse files
  * Opens the project in the current Eclipse workspace

 * When the wizard is done you can find your new integration component in the Eclipse Package Explorer

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent5.png

 * Files of interest:
 An integration component contains of three eclipse projects and each project contains a typical maven source structure of folders.  See [architecture soi.toolkit architecture] for further explanations of this structure. 
  * Project {{{mySample-services}}}
   * Source folder {{{src/test/java}}}
   Contains a main-program, {{{MySampleMuleServer.java}}}, that can start Mule inside Eclipse, mainly used for manual tests and debugging inside the development environment. Service specific test code (unit-tests and producer-teststubs) will be created here when creating services.
   * Source folder {{{src/test/resources}}}
   {{{mySample-teststubs-and-services-config.xml}}} and {{{mySample-teststubs-only-config.xml}}} are common test mule-configuration files used by all services in this integration component. The {{{teststub-service}}}-folder will contain the mule configuration files for the specific services teststubs as they are created. 
   * Source folder {{{src/environment}}}
   This folder contains configuration files for log4j and the services themselves. The files in this folder are used during development inside the project (e.g. loaded by mule on the classpath) but when the integration component is deployed to test and production environments these files are copied to an separate folder in the target environment to be able to be changed and adopted to that specific environment without having to redeploy the integration component for each change.
   * Source folder {{{src/main/java}}}
   This source folder is initially empty but will contain service specific java-code, e.g. transformers,as they are created. 
   * Source folder {{{src/main/resources}}}
   {{{mySample-common.xml}}} and {{{mySample-config.xml}}} are common mule-configuration files used by all services in this integration component. The service-folder will contain the mule configuration files for the spoecific services as they are created. 
  * Project {{{mySample-teststub-web}}}   
   * Target folder {{{target}}}
   The runtime files for this integration components teststub.
   {{{mySample-teststub-1.0-SNAPSHOT.war}}} contains the mule config files and class files for the services teststubs and all jar-files created for executing the teststubs on a standard servlet engine, e.g. Tomcat or Jetty.
  * Project {{{mySample-web}}}
   * Target folder {{{target}}}
   The runtime files for this integration component.
   {{{mySample-1.0-SNAPSHOT.war}}} contains the mule config files and class files for the services and all jar-files created for executing the integration component on a standard servlet engine, e.g. Tomcat or Jetty.

 * In the filesystem the following folder structure is created for you under the selected root folder:

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent6.png

 * After development and local tests are done and you want to deploy the integration component to a common test environment (and later  on in a production environment)  you can create new runtime files (the war-files) by opening a command window in the integration components trunk-folder and enter the command 
 {{{mvn clean install}}}.
 
 If everything goes well the build ends with a {{{BUILD SUCCESSFUL}}} - message

 http://soi-toolkit.googlecode.com/svn/wiki/Tutorials/TutorialCreateIntegrationComponent/TutorialCreateIntegrationComponent7.png